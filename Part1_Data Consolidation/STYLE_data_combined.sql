--For CTE logic, CTE will be executed first then the main query. SO to speed up, optimize the CTEs first then do the main query
--If you see decrepancy between SRQ and Sys2, check feature quantity. Feature quantity will go to SRQ
WITH 
CTE1 AS (--CREATE DATA WITH STORE SINCE IT'S ASSORTED  
SELECT 	test1.STRNBR,test1.SKUNBR,YYWWW,test1.FISCAL_YEAR,test1.week_number_in_fiscal_year,SFC01,SFC02,SFC03,SFC04,SFC05,SFC06,SFC07,SFC08,SFC09,SFC10,SFC11,SFC12,SFC13,SFC14,SFC15,SFC16,SFC17,SFC18,SFC19,SFC20,SFC21,SFC22,SFC23,
	SFC24,SFC25,SFC26,SFC27,SFC28,SFC29,SFC30,SFC31,SFC32,SFC33,SFC34,SFC35,SFC36,SFC37	,SFC38,SFC39,SFC40,SFC41,SFC42,SFC43,SFC44,SFC45,SFC46,SFC47,SFC48,SFC49,SFC50,SFC51, SFC52 FROM 	
	(SELECT STRNBR,SKUNBR,YYWWW,FISCAL_YEAR,week_number_in_fiscal_year FROM(
	SELECT DISTINCT STRNBR,SKUNBR,YYWWW,FISCAL_YEAR,week_number_in_fiscal_year,
	min_week,max_week FROM (  
	SELECT CAST(EXTRACT (YEAR FROM load_datetime) % 100 || LPAD(EXTRACT (week FROM load_datetime),2,'0') AS INT) AS YYWW,
	EXTRACT (year FROM LOAD_DATETIME) AS year,
	EXTRACT (week FROM LOAD_DATETIME) AS week,
	MIN(YYWW) OVER (PARTITION BY STRNBR,SKUNBR) MIN_WEEK,
	CAST(EXTRACT (YEAR FROM NOW()) % 100 || LPAD(EXTRACT (week FROM NOW()),2,'0') AS INT) AS MAX_WEEK,STRNBR,SKUNBR
	FROM EDW_HUB_STAGE.NZ.ARCHIVE_SALES_BPS_FUT_MRSRQW1P s
	LEFT JOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON s.skunbr = p.sku_display_number
	WHERE LOAD_DATETIME  >= '2024-06-01 00:00:00.000' 
	AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
	AND DEPARTMENT_MEMBER_NUMBER in (600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
	and MEMBER_type = 'BPS PRODUCT' 
	AND (SKU_TRANSITION_START_DATE_YRWK = 0 OR SKU_TRANSITION_START_DATE_YRWK >=2445) AND SKU_TYPE_DESCRIPTION = 'Finished'
	) AS P
	CROSS JOIN (SELECT ( FISCAL_YEAR % 100 || LPAD(week_number_in_fiscal_year,2,'0')) AS YYWWW,FISCAL_YEAR,week_number_in_fiscal_year FROM EDW_SPOKE..DIM_DATE 
	WHERE FISCAL_YEAR >= 2024 AND FISCAL_YEAR <= 2025  GROUP BY 1,2,3 ORDER BY 1 DESC) AS T
	WHERE YYWWW >= 2200
	) X
	WHERE YYWWW >= MIN_WEEK AND YYWWW <= max_week) test1
LEFT JOIN (
	SELECT * FROM (
	SELECT CAST(TO_CHAR(LOAD_DATETIME::date,'iyyy') AS int) AS year, CAST(TO_CHAR(LOAD_DATETIME ::date,'iw') AS int) AS week,
	CAST(TO_CHAR(LOAD_DATETIME::date,'iy') || TO_CHAR(LOAD_DATETIME::date,'iw') AS INT) AS YYWW,
	MIN(YYWW) OVER (PARTITION BY STRNBR,SKUNBR) MIN_WEEK,
	MAX(LOAD_DATETIME) OVER (PARTITION BY STRNBR,SKUNBR,YEAR,WEEK) AS WEEK_MAX_LOADTIME,
	CAST(EXTRACT (YEAR FROM NOW()) % 100 || LPAD(EXTRACT (week FROM NOW()),2,'0') AS INT) AS MAX_WEEK,LOAD_DATETIME,strnbr,skunbr,
	SFC01,SFC02,SFC03,SFC04,SFC05,SFC06,SFC07,SFC08,SFC09,SFC10,SFC11,SFC12,SFC13,SFC14,SFC15,SFC16,SFC17,SFC18,SFC19,SFC20,SFC21,SFC22,SFC23,SFC24,SFC25,SFC26,
	SFC27,SFC28,SFC29,SFC30,SFC31,SFC32,SFC33,SFC34,SFC35,SFC36,SFC37,SFC38,SFC39,SFC40,SFC41,SFC42,SFC43,SFC44,SFC45,SFC46,SFC47,SFC48,SFC49,SFC50,SFC51, SFC52 
	FROM EDW_HUB_STAGE.NZ.ARCHIVE_SALES_BPS_FUT_MRSRQW1P S
	LEFT JOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON s.skunbr = p.sku_display_number
	WHERE LOAD_DATETIME  >= '2024-06-01 00:00:00.000' 
	AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
	AND DEPARTMENT_MEMBER_NUMBER in(600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
	AND MEMBER_type = 'BPS PRODUCT' 
	AND (SKU_TRANSITION_START_DATE_YRWK = 0 OR SKU_TRANSITION_START_DATE_YRWK >=2445) AND SKU_TYPE_DESCRIPTION = 'Finished'
	) xxxx
	WHERE LOAD_DATETIME  = WEEK_MAX_LOADTIME ORDER BY LOAD_DATETIME desc) test2
	ON test1.STRNBR = test2.STRNBR AND test1.SKUNBR = test2.SKUNBR and test1.YYWWW = test2.YYWW),
CTE3 AS(
	SELECT  FISCAL_YEAR, WEEK_NUMBER_IN_FISCAL_YEAR,DEPARTMENT_MEMBER_NUMBER,SUB_DEPARTMENT_MEMBER_NUMBER,CLASS_MEMBER_NUMBER,sub_class_display_number, 
	STYLE_DISPLAY_NUMBER, SKU_DISPLAY_NUMBER,sku_name, ASSORTMENT_STATUS, CAST(STORE_NUMBER AS INT) STORE_NUMBER
	FROM EDW_SPOKE..FACT_BPS_HISTORIC_ASSORTMENT HA
	JOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON HA.PRODUCT_MEMBER_KEY = P.MEMBER_KEY
	JOIN EDW_SPOKE..DIM_DATE D ON D.DATE_VALUE >= HA.START_DATE AND D.date_value <= HA.END_DATE
	RIGHT JOIN EDW_SPOKE..DIM_STORE S ON HA.STORE_MEMBER_KEY = S.MEMBER_KEY
	WHERE FISCAL_YEAR >= 2022 AND date_value <= CURRENT_DATE AND S.CHANNEL_GROUP in ('RETAIL','DIRECT') 
	AND ASSORTMENT_STATUS in('A','P') 
	AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
	AND P.DEPARTMENT_MEMBER_NUMBER in(600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
	AND P.MEMBER_type = 'BPS PRODUCT' 
	AND (P.SKU_TRANSITION_START_DATE_YRWK = 0 OR P.SKU_TRANSITION_START_DATE_YRWK >=2445) AND P.SKU_TYPE_DESCRIPTION = 'Finished'
	GROUP BY 1, 2, 3, 4, 5, 6,7,8,9,10,11),
SALES AS (
    SELECT SKU_DISPLAY_NUMBER, style_display_number, WEEK_NUMBER_IN_FISCAL_YEAR, FISCAL_YEAR,AVG(PRICE) AVG_SALE_PRICE, SUM(SALE_QUANTITY) SALES_UNIT
    FROM (
    SELECT SKU_DISPLAY_NUMBER, style_display_number, WEEK_NUMBER_IN_FISCAL_YEAR, FISCAL_YEAR,RETURN_FLAG, SALES_PRICE / NULLIF(SALE_QUANTITY,0) AS PRICE,SALE_QUANTITY 
    FROM EDW_SPOKE.NZ.FACT_BPS_SALES_DETAIL HA
    JOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON HA.INVENTORY_PRODUCT_MEMBER_KEY = P.MEMBER_KEY
    JOIN EDW_SPOKE..DIM_STORE S ON HA.STORE_MEMBER_KEY = S.MEMBER_KEY
    JOIN EDW_SPOKE..DIM_DATE D ON D.DATE_VALUE >= HA.PROCESS_DATE AND D.date_value <= HA.PROCESS_DATE
    AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
    AND P.DEPARTMENT_MEMBER_NUMBER in(600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
    AND P.MEMBER_type = 'BPS PRODUCT' 
    AND (P.SKU_TRANSITION_START_DATE_YRWK = 0 OR P.SKU_TRANSITION_START_DATE_YRWK >=2445) AND P.SKU_TYPE_DESCRIPTION = 'Finished' --AND sku_display_number = 2447097
    ) TEMP1
    WHERE RETURN_FLAG = 'N' AND FISCAL_YEAR >= 2022 
    GROUP BY 1, 2, 3, 4),
INSTOCK AS (
    SELECT FISCAL_YEAR, WEEK_NUMBER_IN_FISCAL_YEAR, STYLE_DISPLAY_NUMBER, SKU_DISPLAY_NUMBER,STR_CNT, AVG(day_instock) AS INSTOCK
    FROM (
    SELECT FISCAL_YEAR, WEEK_NUMBER_IN_FISCAL_YEAR, STYLE_DISPLAY_NUMBER, SKU_DISPLAY_NUMBER, store_number,DAYOFWEEK, SUM(CASE WHEN TOTAL_ONHAND >= 1 THEN 1 ELSE 0 END) / DAYOFWEEK AS DAY_INSTOCK,
    COUNT(DISTINCT store_number) OVER (PARTITION BY FISCAL_YEAR, WEEK_NUMBER_IN_FISCAL_YEAR,SKU_DISPLAY_NUMBER) AS STR_CNT
    FROM (
	SELECT FISCAL_YEAR, WEEK_NUMBER_IN_FISCAL_YEAR, DATE_VALUE, PRODUCT_MEMBER_KEY, STYLE_DISPLAY_NUMBER, SKU_DISPLAY_NUMBER, ASSORTMENT_STATUS, store_number, SUM(HA.ON_HAND_UNITS) AS TOTAL_ONHAND,
	(CASE WHEN FISCAL_YEAR = 2025 AND WEEK_NUMBER_IN_FISCAL_YEAR = (SELECT EXTRACT (week FROM now())) THEN EXTRACT (dow FROM now()) ELSE 7 END) AS DAYOFWEEK
    FROM EDW_SPOKE..FACT_BPS_HISTORIC_ASSORTMENT HA
    JOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON HA.PRODUCT_MEMBER_KEY = P.MEMBER_KEY
    JOIN EDW_SPOKE..DIM_DATE D ON D.DATE_VALUE >= HA.START_DATE AND D.date_value <= HA.END_DATE
    RIGHT JOIN EDW_SPOKE..DIM_STORE S ON HA.STORE_MEMBER_KEY = S.MEMBER_KEY
    WHERE FISCAL_YEAR >= 2022 AND date_value <= CURRENT_DATE AND S.CHANNEL_GROUP = 'RETAIL' AND ASSORTMENT_STATUS = 'A'
    AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
    AND P. DEPARTMENT_MEMBER_NUMBER in(600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
    AND (SKU_TRANSITION_START_DATE_YRWK = 0 OR SKU_TRANSITION_START_DATE_YRWK >=2445) 
    AND P.MEMBER_type = 'BPS PRODUCT' and P.SKU_TYPE_DESCRIPTION = 'Finished'
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8 
    ) TEMP1
    GROUP BY 1, 2, 3, 4, 5, 6
    ) TEMP2
    GROUP BY 1, 2, 3, 4,5),
TREND AS(
	SELECT SKU_DISPLAY_NUMBER AS skunbr, EXTRACT (WEEK FROM now()) AS week,EXTRACT (YEAR FROM now()) AS YEAR,
	SUM(ANNUAL_FORECAST) AS current_FORECAST,SUM(TRENDED_FCST) TRENDED_forecast,TRENDED_forecast/NULLIF(current_FORECAST,0)-1 AS trend
	FROM (
	SELECT SKU_DISPLAY_NUMBER,store_number,MTACTS/NULLIF(MTEXPS,0) AS store_trend,
	(CASE WHEN store_trend IS NULL THEN 1 ELSE 0 END) store_notrend, 
	ANNUAL_FORECAST,
 	(CASE WHEN store_trend IS NULL THEN annual_forecast else STORE_TREND * ANNUAL_FORECAST END) AS trended_fcst  FROM EDW_LANDING.NZ.DOMO_MRTRNM1P M
	RIGHT JOIN 
	(SELECT sku_display_number,store_number,ANNUAL_FORECAST FROM EDW_SPOKE.NZ.FACT_BPS_CURRENT_ASSORTMENT ha
	jOIN EDW_SPOKE..DIM_PRODUCT_BPS P
	ON	HA.PRODUCT_MEMBER_KEY = P.MEMBER_KEY
	JOIN EDW_SPOKE..DIM_STORE S ON HA.STORE_MEMBER_KEY = S.MEMBER_KEY
	WHERE ASSORTMENT_STATUS IN ('A','P') AND us_chain_price NOTNULL 
	AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
	AND P. DEPARTMENT_MEMBER_NUMBER in(600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)
    AND (SKU_TRANSITION_START_DATE_YRWK = 0 OR SKU_TRANSITION_START_DATE_YRWK >=2445) 
    AND P.MEMBER_type = 'BPS PRODUCT' and P.SKU_TYPE_DESCRIPTION = 'Finished' 
	) t
	ON m.SKUNBR  = t.sku_display_number AND m.STRNBR = t.STORE_number --order BY store_number
	) t1
	GROUP BY 1),
SKU_DATA AS (
	SELECT EXTRACT (WEEK FROM now()) AS week,EXTRACT (YEAR FROM now()) AS YEAR,SUB_DEPARTMENT_MEMBER_NUMBER AS SUB_DEPARTMENT_MEMBER_NUMBER, style_display_number,style_name, 	sku_display_number,sku_name,sku_color,Sku_size,us_chain_price,sku_transition_start_date_yrwk T_DATE ,SUM(CASE WHEN ASSORTMENT_STATUS = 'A' THEN 1 ELSE 0 END) DOOR_COUNT , 
	SUM(on_hand_units)  TOTAL_OH,SUM(annual_forecast) ANNUAL_FORECAST, SUM(DESIRED_ON_HAND_UNITS) AS MOD
	FROM	
	(SELECT SUB_DEPARTMENT_MEMBER_NUMBER,style_display_number,style_name, sku_display_number,sku_name,sku_color,Sku_size,us_chain_price,sku_transition_start_date_yrwk,
	ASSORTMENT_STATUS,on_hand_units,on_order_units,annual_forecast,DESIRED_ON_HAND_UNITS,store_number
	FROM EDW_SPOKE.NZ.FACT_BPS_CURRENT_ASSORTMENT ha
	jOIN EDW_SPOKE..DIM_PRODUCT_BPS P ON	HA.PRODUCT_MEMBER_KEY = P.MEMBER_KEY
	JOIN EDW_SPOKE..DIM_STORE S ON HA.STORE_MEMBER_KEY = S.MEMBER_KEY
	WHERE ASSORTMENT_STATUS IN ('A','N','P')  --us_chain_price NOTNULL AND  on_hand_units >=0 AND 
	--AND P.CATEGORY_PRODUCT_LINE_TYPE = 'Softlines'
	AND P.DEPARTMENT_MEMBER_NUMBER IN (600,650,800,475,700,500,350,675,850,300) AND P.SUB_DEPARTMENT_MEMBER_NUMBER IN (606)  
	AND (SKU_TRANSITION_START_DATE_YRWK = 0 OR SKU_TRANSITION_START_DATE_YRWK >=2445) AND P.MEMBER_type = 'BPS PRODUCT' And P.SKU_TYPE_DESCRIPTION = 'Finished' --AND sku_display_number = 3620398
	) temp1
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11 ),
ON_ORDER AS (
	SELECT EXTRACT (YEAR FROM load_datetime) AS YEAR, EXTRACT (week FROM load_datetime) AS week ,inumbr,expect_receive,SUM(POMQTY) AS POMQTY
	FROM (
	SELECT p.LOAD_DATETIME,max(p.LOAD_DATETIME) OVER (PARTITION BY p.PONUMB,POSTAT,fut.inumbr) max_loadtime,
	max(p.postat) OVER (PARTITION BY p.PONUMB,fut.inumbr) max_postat,expect_receive,
	fut.INUMBR,p.PONUMB, POMQTY, POSTAT,POSTOR, fut.poloc
	FROM EDW_HUB_STAGE.NZ.ARCHIVE_PO_BPS_POMHDR  p
	JOIN 
	(SELECT *  FROM EDW_HUB_STAGE.NZ.CURRENT_PO_BPS_POMDTL WHERE POLOC >= 900) fut ON p.PONUMB  = fut.ponumb AND p.POSTOR = fut.POLOC
	RIGHT JOIN
	(
	SELECT  CAST(extract(YEAR FROM date) % 100 || EXTRACT (week FROM date) AS int) AS expect_receive ,INUMBR,ponumb
	from(
	SELECT  CAST('20' || SUBSTRING(POERDT,1, 2)  || '-' || SUBSTRING(POERDT,3, 2) || '-' || SUBSTRING(POERDT,5, 2) AS DATE) AS date,*
	FROM EDW_LANDING.NZ.PO_BPS_MRAPDM1P
	WHERE POERDT <=270000 AND POERDT >=250000
	ORDER BY POERDT DESC) ed
	GROUP BY 1,2,3 ORDER BY 3,2 DESC, 1) exd
	ON exd.PONUMB  = fut.ponumb AND exd.inumbr = fut.inumbr
	WHERE p.PONUMB IN (SELECT DISTINCT PONUMB  FROM EDW_HUB_STAGE.NZ.CURRENT_PO_BPS_POMDTL WHERE  POLOC >=900 AND PODSTA != '9') 
	) temp1
	WHERE load_datetime = max_loadtime AND postat = max_postat  AND postat IN ('3','5')
	GROUP BY 1,2,3,4
	),
SEASON_CODE AS (
	SELECT SACTYPU,ATDSKU,SUM(FALL) AS FALL,SUM(SPRING) AS SPRING, SUM(ALL_SEASON) AS ALL_SEASON
	FROM(
	SELECT A.SACTYPU, A.SACCODU, B.ATDSKU,
	(CASE WHEN SACCODU = 'FALL' THEN 1 ELSE 0 END) AS "FALL",
	(CASE WHEN SACCODU = 'SPRING' THEN 1 ELSE 0 END) AS "SPRING",
	(CASE WHEN SACCODU = 'ALL SEASON' THEN 1 ELSE 0 END) AS "ALL_SEASON"
	FROM EDW_LANDING.NZ.DOMO_MRATDD1P  B 
	JOIN EDW_LANDING.NZ.DOMO_MRSACM1P A ON A.SACTTK = B.ATDTTK AND A.SACSTK = B.ATDSTK AND B.ATDCTK = A.SACCTK 
	WHERE SACSTPU  IN ('SEASON')
	ORDER BY ATDSKU,SACCODU
	) TEMP1
	GROUP BY 1,2
	ORDER BY ATDSKU
	)
--main
SELECT * FROM (
SELECT WEEK_NUMBER_IN_FISCAL_YEAR,fiscal_year,YYWWW,SD.SUB_DEPARTMENT_MEMBER_NUMBER AS SUB_DEPARTMENT_MEMBER_NUMBER,CAST(TEMPX.sku_display_number AS INT) AS sku_display_number
,trim(TEMPX.STYLE_DISPLAY_NUMBER) AS STYLE_DISPLAY_NUMBER,sD.style_name,sD.sku_name,trim(sku_coloR) AS sku_coloR,TRIM(Sku_size) AS Sku_size,us_chain_price,T_DATE, TOTAL_OH,AVG_SALE_PRICE,
SALES_UNIT,
instock,STR_CNT,SD.ANNUAL_FORECAST, TREND, POMQTY, expect_receive,CAST((AVG_SALE_PRICE * SALES_UNIT) AS INT) AS REV
,CAST(SFC01 AS int) SFC01,CAST(SFC02 AS INT )SFC02,CAST(SFC03 AS INT )SFC03,CAST(SFC04 AS INT )SFC04,CAST(SFC05 AS INT )SFC05,CAST(SFC06 AS INT )SFC06,CAST(SFC07 AS INT )SFC07,CAST(SFC08 AS INT )SFC08,CAST(SFC09 AS INT )SFC09,CAST(SFC10 AS INT )SFC10,CAST(SFC11 AS INT )SFC11,CAST(SFC12 AS INT )SFC12,CAST(SFC13 AS INT )SFC13,CAST(SFC14 AS INT )SFC14,CAST(SFC15 AS INT )SFC15,CAST(SFC16 AS INT )SFC16,CAST(SFC17 AS INT )SFC17,CAST(SFC18 AS INT )SFC18,CAST(SFC19 AS INT )SFC19,CAST(SFC20 AS INT )SFC20,CAST(SFC21 AS INT )SFC21,CAST(SFC22 AS INT )SFC22,CAST(SFC23 AS INT )SFC23,CAST(SFC24 AS INT )SFC24,CAST(SFC25 AS INT )SFC25,CAST(SFC26 AS INT )SFC26,CAST(SFC27 AS INT )SFC27,CAST(SFC28 AS INT )SFC28,CAST(SFC29 AS INT )SFC29,CAST(SFC30 AS INT )SFC30,CAST(SFC31 AS INT )SFC31,CAST(SFC32 AS INT )SFC32,CAST(SFC33 AS INT )SFC33,CAST(SFC34 AS INT )SFC34,CAST(SFC35 AS INT )SFC35,CAST(SFC36 AS INT )SFC36,CAST(SFC37 AS INT )SFC37,CAST(SFC38 AS INT )SFC38,CAST(SFC39 AS INT )SFC39,CAST(SFC40 AS INT )SFC40,CAST(SFC41 AS INT )SFC41,CAST(SFC42 AS INT )SFC42,CAST(SFC43 AS INT )SFC43,CAST(SFC44 AS INT )SFC44,CAST(SFC45 AS INT )SFC45,CAST(SFC46 AS INT )SFC46,CAST(SFC47 AS INT )SFC47,CAST(SFC48 AS INT )SFC48,CAST(SFC49 AS INT )SFC49,CAST(SFC50 AS INT )SFC50,CAST(SFC51 AS INT )SFC51,CAST( SFC52 AS INT ) SFC52, round(SFC01+SFC02+SFC03+SFC04+SFC05+SFC06+SFC07+SFC08+SFC09+SFC10+SFC11+SFC12+SFC13+SFC14+SFC15+SFC16+SFC17+SFC18+SFC19+SFC20+SFC21+SFC22+SFC23+SFC24+SFC25+SFC26+SFC27+SFC28+SFC29+SFC30+SFC31+SFC32+SFC33+SFC34+SFC35+SFC36+SFC37+SFC38+SFC39+SFC40+SFC41+SFC42+SFC43+SFC44+SFC45+SFC46+SFC47+SFC48+SFC49+SFC50+SFC51+ SFC52,0) AS total_srq
FROM
(
SELECT TEMP3.fiscal_year,TEMP3.WEEK_NUMBER_IN_FISCAL_YEAR,TEMP3.sku_display_number,DEPARTMENT_MEMBER_NUMBER,SUB_DEPARTMENT_MEMBER_NUMBER,CLASS_MEMBER_NUMBER,sub_class_display_number,TEMP3.STYLE_DISPLAY_NUMBER,
sku_name,AVG_SALE_PRICE,SALES_UNIT,
instock,STR_CNT,YYWWW,
sum(sfc01) SFC01,sum(sfc02) SFC02,sum(sfc03) SFC03,sum(sfc04) SFC04,sum(sfc05) SFC05,sum(sfc06) SFC06,sum(sfc07) SFC07,sum(sfc08) SFC08,sum(sfc09) SFC09,sum(sfc10) SFC10,
sum(sfc11) SFC11,sum(sfc12) SFC12,sum(sfc13) SFC13,sum(sfc14) SFC14,sum(sfc15) SFC15,sum(sfc16) SFC16,sum(sfc17) SFC17,sum(sfc18) SFC18,sum(sfc19) SFC19,sum(sfc20) SFC20,
sum(sfc21) SFC21,sum(sfc22) SFC22,sum(sfc23) SFC23,sum(sfc24) SFC24,sum(sfc25) SFC25,sum(sfc26) SFC26,sum(sfc27) SFC27,sum(sfc28) SFC28,sum(sfc29) SFC29,sum(sfc30) SFC30,
sum(sfc31) SFC31,sum(sfc32) SFC32,sum(sfc33) SFC33,sum(sfc34) SFC34,sum(sfc35) SFC35,sum(sfc36) SFC36,sum(sfc37) SFC37,sum(sfc38) SFC38,sum(sfc39) SFC39,sum(sfc40) SFC40,
sum(sfc41) SFC41,sum(sfc42) SFC42,sum(sfc43) SFC43,sum(sfc44) SFC44,sum(sfc45) SFC45,sum(sfc46) SFC46,sum(sfc47) SFC47,sum(sfc48) SFC48,sum(sfc49) SFC49,sum(sfc50) SFC50,
sum(sfc51) SFC51,sum(sfc52) SFC52
from(
--
SELECT CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR,DEPARTMENT_MEMBER_NUMBER,SUB_DEPARTMENT_MEMBER_NUMBER,CLASS_MEMBER_NUMBER,sub_class_display_number,CTE3.STYLE_DISPLAY_NUMBER,
cte3.SKU_DISPLAY_NUMBER ,sku_name,cte3.STORE_NUMBER,YYWWW,--TOTAL_FORECAST,--instock,
	LAST_VALUE(SFC01 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC01,
	LAST_VALUE(SFC02 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC02,
	LAST_VALUE(SFC03 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC03,
	LAST_VALUE(SFC04 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC04,
	LAST_VALUE(SFC05 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC05,
	LAST_VALUE(SFC06 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC06,
	LAST_VALUE(SFC07 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC07,
	LAST_VALUE(SFC08 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC08,
	LAST_VALUE(SFC09 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC09,
	LAST_VALUE(SFC10 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC10,
	LAST_VALUE(SFC11 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC11,
	LAST_VALUE(SFC12 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC12,
	LAST_VALUE(SFC13 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC13,
	LAST_VALUE(SFC14 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC14,
	LAST_VALUE(SFC15 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC15,
	LAST_VALUE(SFC16 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC16,
	LAST_VALUE(SFC17 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC17,
	LAST_VALUE(SFC18 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC18,
	LAST_VALUE(SFC19 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC19,
	LAST_VALUE(SFC20 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC20,
	LAST_VALUE(SFC21 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC21,
	LAST_VALUE(SFC22 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC22,
	LAST_VALUE(SFC23 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC23,
	LAST_VALUE(SFC24 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC24,
	LAST_VALUE(SFC25 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC25,
	LAST_VALUE(SFC26 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC26,
	LAST_VALUE(SFC27 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC27,
	LAST_VALUE(SFC28 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC28,
	LAST_VALUE(SFC29 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC29,
	LAST_VALUE(SFC30 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC30,
	LAST_VALUE(SFC31 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC31,
	LAST_VALUE(SFC32 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC32,
	LAST_VALUE(SFC33 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC33,
	LAST_VALUE(SFC34 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC34,
	LAST_VALUE(SFC35 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC35,
	LAST_VALUE(SFC36 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC36,
	LAST_VALUE(SFC37 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC37,
	LAST_VALUE(SFC38 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC38,
	LAST_VALUE(SFC39 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC39,
	LAST_VALUE(SFC40 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC40,
	LAST_VALUE(SFC41 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC41,
	LAST_VALUE(SFC42 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC42,
	LAST_VALUE(SFC43 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC43,
	LAST_VALUE(SFC44 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC44,
	LAST_VALUE(SFC45 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC45,
	LAST_VALUE(SFC46 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC46,
	LAST_VALUE(SFC47 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC47,
	LAST_VALUE(SFC48 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC48,
	LAST_VALUE(SFC49 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC49,
	LAST_VALUE(SFC50 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC50,
	LAST_VALUE(SFC51 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC51,
	LAST_VALUE(SFC52 IGNORE NULLS) OVER (PARTITION BY cte3.STORE_NUMBER,cte3.SKU_DISPLAY_NUMBER ORDER BY cte3.SKU_DISPLAY_NUMBER,cte3.STORE_NUMBER,CTE3.fiscal_year,CTE3.WEEK_NUMBER_IN_FISCAL_YEAR  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SFC52
FROM CTE3 
RIGHT JOIN CTE1
ON CTE3.FISCAL_YEAR = CTE1.FISCAL_YEAR AND CTE3.STORE_NUMBER = CTE1.STRNBR AND CTE3.SKU_DISPLAY_NUMBER = CTE1.SKUNBR AND CTE3.WEEK_NUMBER_IN_FISCAL_YEAR = CTE1.WEEK_NUMBER_IN_FISCAL_YEAR
) TEMP3 
LEFT JOIN SALES ON SALES.SKU_DISPLAY_NUMBER = TEMP3.SKU_DISPLAY_NUMBER AND SALES.WEEK_NUMBER_IN_FISCAL_YEAR = TEMP3.WEEK_NUMBER_IN_FISCAL_YEAR AND SALES.fiscal_YEAR= TEMP3.FISCAL_YEAR
LEFT JOIN INSTOCK ON INSTOCK.SKU_DISPLAY_NUMBER = TEMP3.SKU_DISPLAY_NUMBER AND INSTOCK.WEEK_NUMBER_IN_FISCAL_YEAR = TEMP3.WEEK_NUMBER_IN_FISCAL_YEAR AND INSTOCK.fISCAL_YEAR= TEMP3.FISCAL_YEAR
WHERE YYWWW >= 2400
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14
) AS TEMPX
LEFT JOIN SKU_DATA SD ON SD.sku_display_number = TEMPX.sku_display_number AND SD.YEAR = TEMPX.fiscal_year AND SD.WEEK = TEMPX.WEEK_NUMBER_IN_FISCAL_YEAR
LEFT JOIN ON_ORDER O ON O.INUMBR = TEMPX.sku_display_number AND O.YEAR = TEMPX.fiscal_year AND O.WEEK = TEMPX.WEEK_NUMBER_IN_FISCAL_YEAR
LEFT JOIN TREND T ON T.SKUNBR = TEMPX.sku_display_number AND T.WEEK = TEMPX.WEEK_NUMBER_IN_FISCAL_YEAR AND T.YEAR = TEMPX.fiscal_year
LEFT JOIN SEASON_CODE SC ON SC.ATDSKU = TEMPX.sku_display_number 
WHERE TEMPX.YYWWW >= 2430 AND TEMPX.SKU_DISPLAY_NUMBER IN (SELECT sku_display_number FROM sku_data) --AND SPRING = 1 --AND ALL_SEASON = NULL AND FALL = NULL AND SPRING = NULL 
) TEMP5
WHERE SKU_DISPLAY_NUMBER  in (SELECT sku_display_number FROM sku_data) AND 
WEEK_NUMBER_IN_FISCAL_YEAR IS NOT NULL 
ORDER BY TEMP5.SKU_DISPLAY_NUMBER, SUB_DEPARTMENT_MEMBER_NUMBER desc,FISCAL_YEAR DESC , week_number_in_fiscal_year desc
